/**
 * @fileoverview Firestore Security Rules for Maestro-Ya Pro.
 *
 * Core Philosophy:
 * This ruleset employs a strict owner-based access control model. Each document
 * is secured to only allow the user who owns the document (i.e., the user whose
 * UID is stored in the 'ownerId' field) to read, write, update, or delete it.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /clients/{clientId}: Stores client data.
 * - /masters/{masterId}: Stores master professional data.
 * - /work-orders/{workOrderId}: Stores work order data.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied.
 * - All write operations require a valid, authenticated user.
 * - Data validation is limited to authorization-critical fields (ownerId).
 *
 * Denormalization for Authorization:
 * Each document contains an `ownerId` field, which is used to quickly verify
 * ownership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure client records. Only the owner can manage their clients.
     * @path /clients/{clientId}
     * @allow (create) User can create a client if they are the owner.
     * @allow (get, update, delete) Only the owner can access and modify client records.
     * @deny (create) User cannot create a client for another user.
     * @deny (get, update, delete) User cannot access or modify another user's clients.
     * @principle Enforces document ownership for client records.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Secure master professional records. Only the owner can manage their masters.
     * @path /masters/{masterId}
     * @allow (create) User can create a master if they are the owner.
     * @allow (get, update, delete) Only the owner can access and modify master records.
     * @deny (create) User cannot create a master for another user.
     * @deny (get, update, delete) User cannot access or modify another user's masters.
     * @principle Enforces document ownership for master records.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Secure work order records. Only the owner can manage their work orders.
     * @path /work-orders/{workOrderId}
     * @allow (create) User can create a work order if they are the owner.
     * @allow (get, update, delete) Only the owner can access and modify work order records.
     * @deny (create) User cannot create a work order for another user.
     * @deny (get, update, delete) User cannot access or modify another user's work orders.
     * @principle Enforces document ownership for work order records.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}