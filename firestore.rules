/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model where users can only read and write their own data,
 *  with the exception of public read access to the `masters` collection.
 * @data_structure
 *  - /users/{userId}: Stores individual user profiles.
 *  - /clients/{clientId}: Stores client information, with access restricted to the owner.
 *  - /masters/{masterId}: Stores professional/master information, publicly readable but owner-only writable.
 *  - /work-orders/{workOrderId}: Stores work order details, with access restricted to the owner.
 * @key_security_decisions
 *  - Users can only manage their own profiles (create, update, delete). Listing all users is disallowed.
 *  - Masters are publicly listable, but only the owner can create/update/delete them.
 *  - All write operations validate document ownership before proceeding.
 * @denormalization_for_authorization
 *  - The `ownerId` field is used in `clients`, `masters`, and `work-orders` to enforce ownership, avoiding the need for additional reads.
 *  - The `uid` field in `users` is used to match the document ID for self-creation and ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can get their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (create) - User with UID 'user123' can create a client with ownerId 'user123'.
     * @allow (update) - User with UID 'user123' can update a client they own (ownerId is 'user123').
     * @allow (get) - User with UID 'user123' can get a client they own (ownerId is 'user123').
     * @deny (create) - User with UID 'user456' cannot create a client with ownerId 'user123'.
     * @deny (update) - User with UID 'user456' cannot update a client owned by 'user123'.
     * @deny (delete) - User with UID 'user456' cannot delete a client owned by 'user123'.
     * @deny (list) - User with UID 'user456' cannot list clients not owned by them.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }
      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /masters/{masterId}
     * @allow (get) - Anyone can read master profiles.
     * @allow (list) - Anyone can list master profiles.
     * @allow (create) - User with UID 'user123' can create a master profile with ownerId 'user123'.
     * @allow (update) - User with UID 'user123' can update a master profile they own (ownerId is 'user123').
     * @allow (delete) - User with UID 'user123' can delete a master profile they own.
     * @deny (create) - User with UID 'user456' cannot create a master profile with ownerId 'user123'.
     * @deny (update) - User with UID 'user456' cannot update a master profile owned by 'user123'.
     * @deny (delete) - User with UID 'user456' cannot delete a master profile owned by 'user123'.
     * @principle Allows public reads but enforces document ownership for writes.
     */
    match /masters/{masterId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (create) - User with UID 'user123' can create a work order with ownerId 'user123'.
     * @allow (update) - User with UID 'user123' can update a work order they own (ownerId is 'user123').
     * @allow (get) - User with UID 'user123' can get a work order they own (ownerId is 'user123').
     * @deny (create) - User with UID 'user456' cannot create a work order with ownerId 'user123'.
     * @deny (update) - User with UID 'user456' cannot update a work order owned by 'user123'.
     * @deny (delete) - User with UID 'user456' cannot delete a work order owned by 'user123'.
     * @deny (list) - User with UID 'user456' cannot list work orders not owned by them.
     * @principle Enforces document ownership for writes.
     */
    match /work-orders/{workOrderId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }
      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}