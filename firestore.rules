/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, with a hierarchy of owner -> admin -> employee.
 * All data is stored in top-level collections: /users, /clients, /masters, and /work-orders.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles in /users.
 * - Clients, Masters, and WorkOrders are owned by a user (ownerId field).
 * - Only the owner can create, update, or delete Clients, Masters, and WorkOrders.
 * - Data shape is not strictly enforced beyond ownership validation for prototyping flexibility.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (create) if the user ID in the request does not match the authenticated user ID.
     * @deny (update) if the user attempts to change the uid.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to client information.
     * @path /clients/{clientId}
     * @allow (create, update, delete) if the user is the owner of the client.
     * @deny (create) if the ownerId in the request does not match the authenticated user ID.
     * @deny (update, delete) if the client document does not exist or the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true; // Public read for prototyping
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to master/professional information.
     * @path /masters/{masterId}
     * @allow (create, update, delete) if the user is the owner of the master.
     * @deny (create) if the ownerId in the request does not match the authenticated user ID.
     * @deny (update, delete) if the master document does not exist or the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true; // Public read for prototyping
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order information.
     * @path /work-orders/{workOrderId}
     * @allow (create, update, delete) if the user is the owner of the work order.
     * @deny (create) if the ownerId in the request does not match the authenticated user ID.
     * @deny (update, delete) if the work order document does not exist or the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true; // Public read for prototyping
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}