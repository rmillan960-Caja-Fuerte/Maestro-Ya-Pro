/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on strict authentication and authorization.
 * Data validation is relaxed to allow for flexible schema evolution.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /clients/{clientId}: Client data, accessible only to the owning user.
 * - /masters/{masterId}: Master/professional data, accessible only to the owning user.
 * - /work-orders/{workOrderId}: Work order data, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disabled for all collections.
 * - All documents are owned by a specific user, enforced via the `ownerId` or `uid` field.
 * - Data validation is limited to ensuring ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `ownerId` field is used in `clients`, `masters`, and `work-orders` collections to enforce ownership.
 * - The `uid` field in `users` collection enforces ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the requesting user is the owner of the profile.
     * @deny (read, write) if the requesting user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow read access to the user's own profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allow listing only for the owner, effectively disabled
      allow list: if false;
      // Allow creation if the user is creating their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      // Allow updates if the user is the owner and the user ID is immutable.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      // Allow deletion if the user is the owner.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to client data.
     * @path /clients/{clientId}
     * @allow (read, write) if the requesting user is the owner of the client data.
     * @deny (read, write) if the requesting user is not the owner of the client data.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      // Allow read access to the client data if the user is the owner.
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      // Allow listing only for the owner, effectively disabled
      allow list: if false;
      // Allow creation if the user is the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      // Allow updates if the user is the owner and the ownerId is immutable.
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      // Allow deletion if the user is the owner.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to master/professional data.
     * @path /masters/{masterId}
     * @allow (read, write) if the requesting user is the owner of the master data.
     * @deny (read, write) if the requesting user is not the owner of the master data.
     * @principle Enforces document ownership for all operations.
     */
    match /masters/{masterId} {
      // Allow read access to the master data if the user is the owner.
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      // Allow listing only for the owner, effectively disabled
      allow list: if false;
      // Allow creation if the user is the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      // Allow updates if the user is the owner and the ownerId is immutable.
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      // Allow deletion if the user is the owner.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order data.
     * @path /work-orders/{workOrderId}
     * @allow (read, write) if the requesting user is the owner of the work order data.
     * @deny (read, write) if the requesting user is not the owner of the work order data.
     * @principle Enforces document ownership for all operations.
     */
    match /work-orders/{workOrderId} {
      // Allow read access to the work order data if the user is the owner.
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      // Allow listing only for the owner, effectively disabled
      allow list: if false;
      // Allow creation if the user is the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      // Allow updates if the user is the owner and the ownerId is immutable.
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      // Allow deletion if the user is the owner.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}