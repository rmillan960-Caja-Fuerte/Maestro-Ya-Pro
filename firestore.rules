/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and
 * document ownership while keeping data-shape validation flexible. This
 * allows for rapid iteration on the data model without sacrificing security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated
 *   user can read or write their own profile.
 * - /clients/{clientId}: Stores client information. Only the owner (based on ownerId)
 *   can create, read, update, or delete client documents.
 * - /masters/{masterId}: Stores professional/master information. Only the owner
 *   (based on ownerId) can create, read, update, or delete master documents.
 * - /work-orders/{workOrderId}: Stores work order details. Only the owner
 *   (based on ownerId) can create, read, update, or delete work order documents.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Data-shape validation is minimized to allow for flexible prototyping. Only
 *   authorization-critical fields (e.g., ownerId) are validated.
 * - All write operations are protected by authorization checks to prevent
 *   unauthorized data modification or deletion.
 *
 * Denormalization for Authorization:
 * - The 'Client', 'Master', and 'WorkOrder' entities all have an 'ownerId' field.
 *   This denormalization allows the security rules to quickly verify ownership
 *   without needing to perform additional reads.
 *
 * Structural Segregation:
 * - Public and private data are stored in separate collections to simplify
 *   security rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     *   - Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/users/user123' }
     * @allow (create) Authenticated user can create their profile if the userId matches their auth.uid.
     *   - Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123', data: { uid: 'user123' } }
     * @allow (update) Authenticated user can update their own profile.
     *   - Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/users/user123', data: { firstName: 'New Name' } }
     * @allow (delete) Authenticated user can delete their own profile.
     *   - Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/users/user123' }
     * @deny (get) User attempts to read another user's profile.
     *   - Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/users/user123' }
     * @deny (create) User attempts to create a profile with a mismatched userId.
     *   - Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user456', data: { uid: 'user456' } }
     * @deny (list) Listing all users is not allowed.
     *   - Request: { auth: { uid: 'user123' }, method: 'list', path: '/databases/(default)/documents/users' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages client documents.
     * @path /clients/{clientId}
     * @allow (create) Owner can create a client document if the ownerId matches their auth.uid.
     *   - Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/clients/client1', data: { ownerId: 'user123' } }
     * @allow (get) Owner can read their own client document.
     *   - Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/clients/client1' }
     * @allow (list) Owner can list their own client documents.
     *   - Request: { auth: { uid: 'user123' }, method: 'list', path: '/databases/(default)/documents/clients' }
     * @allow (update) Owner can update their own client document.
     *   - Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/clients/client1', data: { status: 'active' } }
     * @allow (delete) Owner can delete their own client document.
     *   - Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/clients/client1' }
     * @deny (create) User attempts to create a client document for another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'create', path: '/databases/(default)/documents/clients/client1', data: { ownerId: 'user123' } }
     * @deny (get) User attempts to read a client document owned by another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/clients/client1' }
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages master documents.
     * @path /masters/{masterId}
     * @allow (create) Owner can create a master document if the ownerId matches their auth.uid.
     *   - Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/masters/master1', data: { ownerId: 'user123' } }
     * @allow (get) Owner can read their own master document.
     *   - Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/masters/master1' }
     * @allow (list) Owner can list their own master documents.
     *   - Request: { auth: { uid: 'user123' }, method: 'list', path: '/databases/(default)/documents/masters' }
     * @allow (update) Owner can update their own master document.
     *   - Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/masters/master1', data: { status: 'active' } }
     * @allow (delete) Owner can delete their own master document.
     *   - Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/masters/master1' }
     * @deny (create) User attempts to create a master document for another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'create', path: '/databases/(default)/documents/masters/master1', data: { ownerId: 'user123' } }
     * @deny (get) User attempts to read a master document owned by another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/masters/master1' }
     * @principle Enforces document ownership for all operations.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (create) Owner can create a work order document if the ownerId matches their auth.uid.
     *   - Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/work-orders/workOrder1', data: { ownerId: 'user123' } }
     * @allow (get) Owner can read their own work order document.
     *   - Request: { auth: { uid: 'user123' }, method: 'get', path: '/databases/(default)/documents/work-orders/workOrder1' }
     * @allow (list) Owner can list their own work order documents.
     *   - Request: { auth: { uid: 'user123' }, method: 'list', path: '/databases/(default)/documents/work-orders' }
     * @allow (update) Owner can update their own work order document.
     *   - Request: { auth: { uid: 'user123' }, method: 'update', path: '/databases/(default)/documents/work-orders/workOrder1', data: { status: 'active' } }
     * @allow (delete) Owner can delete their own work order document.
     *   - Request: { auth: { uid: 'user123' }, method: 'delete', path: '/databases/(default)/documents/work-orders/workOrder1' }
     * @deny (create) User attempts to create a work order document for another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'create', path: '/databases/(default)/documents/work-orders/workOrder1', data: { ownerId: 'user123' } }
     * @deny (get) User attempts to read a work order document owned by another user.
     *   - Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/work-orders/workOrder1' }
     * @principle Enforces document ownership for all operations.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}