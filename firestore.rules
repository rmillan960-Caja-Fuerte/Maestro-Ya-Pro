/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users (represented by their unique Firebase Authentication UIDs) primarily own and control the data they create. A "super admin" role is supported which bypasses ownership checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user and super admins.
 * - /clients/{clientId}: Stores client information. Access is restricted to the owning user and super admins.
 * - /masters/{masterId}: Stores professional/master information. Access is restricted to the owning user and super admins.
 * - /work-orders/{workOrderId}: Stores work order details. Access is restricted to the owning user and super admins.
 *
 * Key Security Decisions:
 * - User data is strictly private; listing all users is disallowed.
 * - The `ownerId` field in `Client`, `Master`, and `WorkOrder` documents is used to enforce ownership.
 * - A `superAdmin` role, if present in the user's profile, bypasses all ownership checks, granting full read/write access.
 * - Schema validation is relaxed in this prototyping phase, focusing only on authorization and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID or super admin can access/modify their profile.
     * @deny (create) User trying to create a profile with a different UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces user ownership for profile data and restricts listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin';
      }
      
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
    }

    /**
     * @description Manages client information.
     * @path /clients/{clientId}
     * @allow (create) User can create a client and assign themselves as the owner.
     * @allow (get, list, update, delete) Owner or super admin can access/modify client data.
     * @deny (create) User trying to create a client with a different ownerId.
     * @principle Enforces document ownership for client records.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.ownerId;
      }

      function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin';
      }
      
      function isExistingOwner() {
          return request.auth.uid == resource.data.ownerId && resource != null;
      }

      allow get: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow delete: if isSignedIn() && (isOwner() || isSuperAdmin());
    }

    /**
     * @description Manages master/professional information.
     * @path /masters/{masterId}
     * @allow (create) User can create a master profile and assign themselves as the owner.
     * @allow (get, list, update, delete) Owner or super admin can access/modify master data.
     * @deny (create) User trying to create a master profile with a different ownerId.
     * @principle Enforces document ownership for master records.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.ownerId;
      }

      function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin';
      }
      
      function isExistingOwner() {
          return request.auth.uid == resource.data.ownerId && resource != null;
      }

      allow get: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow delete: if isSignedIn() && (isOwner() || isSuperAdmin());
    }

    /**
     * @description Manages work order details.
     * @path /work-orders/{workOrderId}
     * @allow (create) User can create a work order and assign themselves as the owner.
     * @allow (get, list, update, delete) Owner or super admin can access/modify work order data.
     * @deny (create) User trying to create a work order with a different ownerId.
     * @principle Enforces document ownership for work order records.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.ownerId;
      }

      function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superAdmin';
      }
      
      function isExistingOwner() {
          return request.auth.uid == resource.data.ownerId && resource != null;
      }

      allow get: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && (isOwner() || isSuperAdmin());
      allow delete: if isSignedIn() && (isOwner() || isSuperAdmin());
    }
  }
}