/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data access. Each user can only access their own profile data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the user can read/write their own profile.
 * - /masters/{masterId}: Stores master/professional information. Only the owner can read/write their own master profiles.
 * - /work-orders/{workOrderId}: Stores work order details.  Only the owner can read/write their own work orders.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profile.
 * - Masters can only create, read, update, and delete their own master profiles (ownerId matches auth.uid).
 * - Work Orders can only be created, read, updated, and deleted by their owner (ownerId matches auth.uid).
 * - Listing of users, masters, and work orders is only allowed to the respective owner.
 *
 * Denormalization for Authorization:
 * - The 'Master' and 'WorkOrder' entities have an 'ownerId' field. This field is used to enforce ownership and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get) User with uid 'user123' can read their profile.
     * @allow (update) User with uid 'user123' can update their profile.
     * @allow (delete) User with uid 'user123' can delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow users to create their own profile if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Allow users to read their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow users to list their own profile information
      allow list: if isOwner(userId);

      // Allow users to update their own profile
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow users to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master/professional information.
     * @path /masters/{masterId}
     * @allow (create) User with uid 'user123' can create a master profile with ownerId 'user123'.
     * @allow (get) User with uid 'user123' can read the master profile with ownerId 'user123'.
     * @allow (update) User with uid 'user123' can update the master profile with ownerId 'user123'.
     * @allow (delete) User with uid 'user123' can delete the master profile with ownerId 'user123'.
     * @deny (create) User with uid 'user456' cannot create a master profile with ownerId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /masters/{masterId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

        // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }


      // Allow a user to create a master profile if they are signed in and set the ownerId to their uid
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);

      // Allow a user to get a master profile if they are the owner
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);

      // Allow a user to list master profiles if they are the owner
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Allow a user to update a master profile if they are the owner
      allow update: if isExistingOwner(resource.data.ownerId);

      // Allow a user to delete a master profile if they are the owner
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order details.
     * @path /work-orders/{workOrderId}
     * @allow (create) User with uid 'user123' can create a work order with ownerId 'user123'.
     * @allow (get) User with uid 'user123' can read the work order with ownerId 'user123'.
     * @allow (update) User with uid 'user123' can update the work order with ownerId 'user123'.
     * @allow (delete) User with uid 'user123' can delete the work order with ownerId 'user123'.
     * @deny (create) User with uid 'user456' cannot create a work order with ownerId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /work-orders/{workOrderId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

        // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      // Allow a user to create a work order if they are signed in and set the ownerId to their uid
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);

      // Allow a user to get a work order if they are the owner
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);

      // Allow a user to list work orders if they are the owner
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Allow a user to update a work order if they are the owner
      allow update: if isExistingOwner(resource.data.ownerId);

      // Allow a user to delete a work order if they are the owner
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}