/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each document is owned
 * by a specific user, identified by their Firebase Authentication UID.
 * Only the owner has full read and write access to their own documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /masters/{masterId}: Stores master/professional information.
 * - /work-orders/{workOrderId}: Stores work order details.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - All writes are validated against user ownership.
 * - In the case of any ambiguity, the rules default to a secure, deny-all posture.
 *
 * Denormalization for Authorization:
 * - The 'Master' and 'WorkOrder' entities both require an 'ownerId' field. This field
 *   is used to directly link the document to its owner, avoiding the need for
 *   complex lookups or joins in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, list) - User with UID 'user123' can read their profile.
     * @allow (update, delete) - User with UID 'user123' can update/delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /masters/{masterId}
     * @allow (create) - User with UID 'user123' can create a master profile with ownerId 'user123'.
     * @allow (get, list) - Anyone can read master profiles.
     * @allow (update, delete) - User with UID 'user123' can update/delete the master profile they own.
     * @deny (create) - User with UID 'user456' cannot create a master profile with ownerId 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId) && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (create) - User with UID 'user123' can create a work order with ownerId 'user123'.
     * @allow (get, list) - Anyone can read work orders.
     * @allow (update, delete) - User with UID 'user123' can update/delete the work order they own.
     * @deny (create) - User with UID 'user456' cannot create a work order with ownerId 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId) && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }
  }
}