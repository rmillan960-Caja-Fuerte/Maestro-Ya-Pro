/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for users, clients, masters, and work orders.
 *  Each document is secured to allow only the owner (identified by the `ownerId` or `uid` field) to create, read, update, and delete it.
 * @data_structure
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user themselves.
 * - /clients/{clientId}: Stores client information. Access is restricted to the owner of the client.
 * - /masters/{masterId}: Stores master/professional information. Access is restricted to the owner of the master profile.
 * - /work-orders/{workOrderId}: Stores work order information. Access is restricted to the owner of the work order.
 * @key_security_decisions
 * - No listing of users, clients, masters, or work orders is allowed to prevent unauthorized data access.
 * - All write operations require authentication.
 * - Data validation is limited to ownerId consistency checks on create and immutability on update.
 * @denormalization_for_authorization ownerId and uid fields are used within documents and as part of the path to ensure simple and performant authorization checks.
 * @structural_segregation  All user-specific data is stored under the corresponding /users/{userId} or via ownerId fields, ensuring clear separation of data and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) Authenticated user can read their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (create) Authenticated user cannot create a profile with a userId that does not match their auth.uid.
     * @deny (get) Authenticated user cannot read a profile if the userId does not match their auth.uid.
     * @deny (update) Authenticated user cannot update a profile if the userId does not match their auth.uid.
     * @deny (delete) Authenticated user cannot delete a profile if the userId does not match their auth.uid.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user can create a client document if they are the owner.
     * @allow (get) Authenticated user can read a client document if they are the owner.
     * @allow (update) Authenticated user can update a client document if they are the owner.
     * @allow (delete) Authenticated user can delete a client document if they are the owner.
     * @deny (create) Authenticated user cannot create a client document if they are not the owner.
     * @deny (get) Authenticated user cannot read a client document if they are not the owner.
     * @deny (update) Authenticated user cannot update a client document if they are not the owner.
     * @deny (delete) Authenticated user cannot delete a client document if they are not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

       function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to master documents.
     * @path /masters/{masterId}
     * @allow (create) Authenticated user can create a master document if they are the owner.
     * @allow (get) Authenticated user can read a master document if they are the owner.
     * @allow (update) Authenticated user can update a master document if they are the owner.
     * @allow (delete) Authenticated user can delete a master document if they are the owner.
     * @deny (create) Authenticated user cannot create a master document if they are not the owner.
     * @deny (get) Authenticated user cannot read a master document if they are not the owner.
     * @deny (update) Authenticated user cannot update a master document if they are not the owner.
     * @deny (delete) Authenticated user cannot delete a master document if they are not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

       function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (create) Authenticated user can create a work order document if they are the owner.
     * @allow (get) Authenticated user can read a work order document if they are the owner.
     * @allow (update) Authenticated user can update a work order document if they are the owner.
     * @allow (delete) Authenticated user can delete a work order document if they are the owner.
     * @deny (create) Authenticated user cannot create a work order document if they are not the owner.
     * @deny (get) Authenticated user cannot read a work order document if they are not the owner.
     * @deny (update) Authenticated user cannot update a work order document if they are not the owner.
     * @deny (delete) Authenticated user cannot delete a work order document if they are not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

       function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}