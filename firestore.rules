/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user ownership while providing flexibility in data shapes for rapid prototyping.
 * It enforces that only the owner of a document can create, update, or delete it. List operations are restricted to owners for user-specific
 * data and public for publicly accessible data. Schema validation is intentionally relaxed to accelerate development, but authorization-critical
 * fields are validated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user themselves can read/write their profile.
 * - /masters/{masterId}: Stores master/professional information. Only the owner can manage this.
 * - /work-orders/{workOrderId}: Stores work order details. Only the owner can manage this.
 *
 * Key Security Decisions:
 * - Strict User Ownership: All write operations are restricted to the document owner.
 * - No User Listing: Listing all users is disallowed to prevent information leakage.
 *
 * Denormalization for Authorization:
 * The `ownerId` field is used in `/masters/{masterId}` and `/work-orders/{workOrderId}` to directly enforce ownership, avoiding the need for costly `get()` calls to other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can create their profile if request.auth.uid == userId.
     * @deny (create) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot create a profile for another user (e.g., userId == 'differentUserId').
     * @allow (get) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can read their own profile.
     * @deny (get) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot read another user's profile (e.g., userId == 'differentUserId').
     * @allow (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can update their own profile.
     * @deny (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot update another user's profile (e.g., userId == 'differentUserId').
     * @allow (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can delete their own profile.
     * @deny (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot delete another user's profile (e.g., userId == 'differentUserId').
     * @allow (list) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can list their own documents.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == request.resource.data.uid && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /masters/{masterId}
     * @allow (create) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can create a master profile if they are the owner.
     * @deny (create) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot create a master profile for another user (e.g., ownerId != request.auth.uid).
     * @allow (get) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can read a master profile if they are the owner.
     * @deny (get) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot read a master profile they don't own.
     * @allow (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can update a master profile if they are the owner.
     * @deny (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot update a master profile they don't own.
     * @allow (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can delete a master profile if they are the owner.
     * @deny (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot delete a master profile they don't own.
     * @allow (list) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can list masters documents they own.
     * @principle Enforces document ownership for all operations on master profiles.
     */
    match /masters/{masterId} {
      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (get) Any user can read a work order.
     * @allow (list) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can list work orders if they are the owner.
     * @deny (create) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot create a work order for another user (e.g., ownerId != request.auth.uid).
     * @allow (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can update a work order if they are the owner.
     * @deny (update) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot update a work order they don't own.
     * @allow (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' can delete a work order if they are the owner.
     * @deny (delete) User 'QBKrBohUkxdmXwtWYMjKaGpMjWp2' cannot delete a work order they don't own.
     * @principle Enforces document ownership for writes. Public read.
     */
    match /work-orders/{workOrderId} {
      allow get: if true;
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}