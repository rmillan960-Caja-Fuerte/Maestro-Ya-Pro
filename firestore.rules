/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and related data (clients, masters, work orders).
 * Only the authenticated user who owns a document can read or modify it.
 *
 * Data Structure:
 * - User profiles are stored in /users/{userId}.
 * - Clients are stored in /clients/{clientId} and contain an ownerId field.
 * - Masters (professionals) are stored in /masters/{masterId} and contain an ownerId field.
 * - Work orders are stored in /work-orders/{workOrderId} and contain an ownerId, clientId, and masterId.
 *
 * Key Security Decisions:
 * - Users can only read or write their own profile data.
 * - Clients, masters, and work orders can only be created, read, updated, or deleted by their owner.
 * - Listing of any collection is restricted to the owner.
 *
 * Denormalization for Authorization:
 * - Clients, Masters, and WorkOrders denormalize the ownerId to allow easy access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (delete) User with UID 'user_abc' can delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows owners to manage their clients.
     * @path /clients/{clientId}
     * @allow (create) User with UID 'user_abc' can create a client with ownerId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a client with ownerId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a client with ownerId 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a client with ownerId 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a client with ownerId 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read a client with ownerId 'user_abc'.
     * @principle Enforces document ownership for all operations on clients.
     */
    match /clients/{clientId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows owners to manage their master profiles.
     * @path /masters/{masterId}
     * @allow (create) User with UID 'user_abc' can create a master profile with ownerId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a master profile with ownerId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a master profile with ownerId 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a master profile with ownerId 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a master profile with ownerId 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read a master profile with ownerId 'user_abc'.
     * @principle Enforces document ownership for all operations on master profiles.
     */
    match /masters/{masterId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows owners to manage their work orders.
     * @path /work-orders/{workOrderId}
     * @allow (create) User with UID 'user_abc' can create a work order with ownerId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a work order with ownerId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a work order with ownerId 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a work order with ownerId 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a work order with ownerId 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read a work order with ownerId 'user_abc'.
     * @principle Enforces document ownership for all operations on work orders.
     */
    match /work-orders/{workOrderId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isOwner(resource.data.ownerId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}