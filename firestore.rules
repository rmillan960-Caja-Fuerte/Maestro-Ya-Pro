/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-based authorization.
 * It avoids overly strict data validation to facilitate rapid prototyping and schema evolution.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owner (the user themselves).
 * - /masters/{masterId}: Stores master/professional profiles. Access is restricted to the owner (the user who created the profile).
 * - /work-orders/{workOrderId}: Stores work orders. Access is restricted to the owner (the user who created the order).
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent data leakage.
 * - Write access is strictly controlled via ownership.
 * - Data validation is relaxed during prototyping, focusing only on essential fields.
 *
 * Denormalization for Authorization:
 * The 'ownerId' field is crucial for authorization in the 'masters' and 'work-orders' collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their profile.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) - Authenticated user cannot access or modify another user's profile.
     * @deny (list) - Listing users is prohibited.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for master profiles.
     * @path /masters/{masterId}
     * @allow (create) - Authenticated user can create a master profile with their UID as ownerId.
     * @allow (get, list) - Allows anyone to read the master profiles.
     * @allow (update, delete) - Only the owner can update or delete the master profile.
     * @deny (create) - Authenticated user cannot create a master profile with a mismatched ownerId.
     * @deny (update, delete) - Authenticated user cannot update or delete another user's master profile.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /masters/{masterId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isOwner(resource.data.ownerId) && resource != null;
    }

    /**
     * @description Enforces access control for work orders.
     * @path /work-orders/{workOrderId}
     * @allow (create) - Authenticated user can create a work order with their UID as ownerId.
     * @allow (get, list) - Allows anyone to read the work orders.
     * @allow (update, delete) - Only the owner can update or delete the work order.
     * @deny (create) - Authenticated user cannot create a work order with a mismatched ownerId.
     * @deny (update, delete) - Authenticated user cannot update or delete another user's work order.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /work-orders/{workOrderId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data.ownerId) && resource != null;
      allow delete: if isOwner(resource.data.ownerId) && resource != null;
    }
  }
}