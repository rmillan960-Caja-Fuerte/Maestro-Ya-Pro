/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the 'users', 'masters', and 'work-orders' collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /masters/{masterId}: Stores master/professional information, accessible only to the owner.
 * - /work-orders/{workOrderId}: Stores work order details, accessible only to the owner.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations are restricted to the document owner.
 * - Data validation during write operations is minimized in this prototyping phase, focusing only on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (list) - Prevents listing all users for privacy.
     * @deny (create, update, delete) - Unauthorized user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /databases/{database}/documents/masters/{masterId}
     * @allow (create) - Authenticated user can create a master document if they are the owner.
     * @allow (get, update, delete) - Authenticated user can access and modify their own master documents.
     * @deny (create, update, delete) - Unauthorized user.
     * @deny (list) - Prevents listing all master for privacy.
     * @principle Enforces document ownership for writes.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(masterId) {
        return request.auth.uid == resource.data.ownerId;
      }


      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(masterId);
      allow delete: if isSignedIn() && isOwner(masterId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /databases/{database}/documents/work-orders/{workOrderId}
     * @allow (create) - Authenticated user can create a work order document if they are the owner.
     * @allow (get, update, delete) - Authenticated user can access and modify their own work order documents.
     * @deny (create, update, delete) - Unauthorized user.
     * @deny (list) - Prevents listing all work orders for privacy.
     * @principle Enforces document ownership for writes.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(workOrderId) {
        return request.auth.uid == resource.data.ownerId;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(workOrderId);
      allow delete: if isSignedIn() && isOwner(workOrderId);
    }
  }
}