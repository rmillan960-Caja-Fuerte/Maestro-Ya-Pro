/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for most data, with some public read access where appropriate.
 * All write operations require authentication. Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owner.
 * - /masters/{masterId}: Stores master/professional information, accessible only to the owner.
 * - /work-orders/{workOrderId}: Stores work order details, accessible only to the owner.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Masters can only access their own master data.
 * - Work orders can only be accessed by their owner.
 * - Listing of users, masters, or work orders is not generally allowed except by the owner.
 * - No role-based access control is implemented in this initial version.
 *
 * Denormalization for Authorization:
 * - The 'Master' and 'WorkOrder' entities both contain an 'ownerId' field. This is CRUCIAL for enforcing ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) User can retrieve their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (get) User attempts to retrieve another user's profile.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master/professional information.
     * @path /masters/{masterId}
     * @allow (create) User with matching UID can create their master profile.
     * @allow (get) Any user can retrieve master profiles.
     * @allow (update) User can update their own master profile.
     * @allow (delete) User can delete their own master profile.
     * @deny (create) User attempts to create a master profile with a mismatched UID.
     * @deny (get) User attempts to retrieve another user's master profile.
     * @deny (update) User attempts to update another user's master profile.
     * @deny (delete) User attempts to delete another user's master profile.
     * @principle Enforces document ownership for writes. Read is public.
     */
    match /masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data.ownerId == ownerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order details.
     * @path /work-orders/{workOrderId}
     * @allow (create) User with matching UID can create a work order.
     * @allow (get) User can retrieve their own work order.
     * @allow (update) User can update their own work order.
     * @allow (delete) User can delete their own work order.
     * @deny (create) User attempts to create a work order with a mismatched UID.
     * @deny (get) User attempts to retrieve another user's work order.
     * @deny (update) User attempts to update another user's work order.
     * @deny (delete) User attempts to delete another user's work order.
     * @principle Enforces document ownership for all operations.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data.ownerId == ownerId;
      }

      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }
  }
}