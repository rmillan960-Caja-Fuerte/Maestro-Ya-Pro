/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and master records.
 *   Work orders are secured using an owner-based model as well.
 * @dataStructure
 *   - /users/{userId}: Stores user profile information, accessible only by the user.
 *   - /masters/{masterId}: Stores master/professional information, accessible only by the owner.
 *   - /work-orders/{workOrderId}: Stores work order details, accessible only by the owner.
 * @keySecurityDecisions
 *   - Users can only access their own profile data.
 *   - Masters can only access their own master data.
 *   - Work orders are secured and only accessible by the owner.
 *   - Listing of the /clients collection is denied based on the error report.
 * @denormalizationForAuthorization
 *   - Each document includes an `ownerId` field that is used to enforce ownership.
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner() {
      return isSignedIn() && resource.data.keys().hasAll(['ownerId']) && request.auth.uid == resource.data.ownerId;
    }

    match /users/{userId} {
      /**
       * @description Controls access to user profile documents.
       * @path /users/{userId}
       * @allow (create) User with UID 'user123' can create their profile.
       *   Request data must include 'uid': 'user123'.
       * @allow (get, update, delete) User with UID 'user123' can access/modify their profile.
       * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
       * @deny (get, update, delete) User with UID 'user456' cannot access/modify profile of 'user123'.
       * @principle Enforces document ownership for all operations on user profiles.
       */
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId);
    }

    match /masters/{masterId} {
      /**
       * @description Controls access to master profile documents.
       * @path /masters/{masterId}
       * @allow (create) User with UID 'user123' can create a master profile.
       *   Request data must include 'ownerId': 'user123'.
       * @allow (get, update, delete) User with UID 'user123' can access/modify their master profile.
       * @deny (create) User with UID 'user456' cannot create a master profile for 'user123'.
       * @deny (get, update, delete) User with UID 'user456' cannot access/modify master profile of 'user123'.
       * @principle Enforces document ownership for all operations on master profiles.
       */
      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    match /work-orders/{workOrderId} {
       /**
        * @description Controls access to work order documents.
        * @path /work-orders/{workOrderId}
        * @allow (create) User with UID 'user123' can create a work order.
        *   Request data must include 'ownerId': 'user123'.
        * @allow (get, update, delete) User with UID 'user123' can access/modify their work order.
        * @deny (create) User with UID 'user456' cannot create a work order for 'user123'.
        * @deny (get, update, delete) User with UID 'user456' cannot access/modify work order of 'user123'.
        * @principle Enforces document ownership for all operations on work orders.
        */
      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    match /clients/{clientId} {
      /**
       * @description Denies listing of the clients collection.
       * @path /clients/{clientId}
       * @deny (list) Any user cannot list the clients collection.
       * @principle Restricts access to the clients collection based on the error report.
       */
      allow get: if false; // Deny get access by default. Requires specific implementation for access to client information.
      allow list: if false; // Listing clients is not permitted.
      allow create: if false; // Deny create access by default.
      allow update: if false; // Deny update access by default.
      allow delete: if false; // Deny delete access by default.
    }
  }
}