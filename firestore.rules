/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for most data, ensuring users can only
 * access their own profiles and the data they create. It prioritizes security and data
 * isolation while allowing for flexible data structures during the prototyping phase.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /masters/{masterId}: Stores professional/master information, owned by a specific user.
 * - /work-orders/{workOrderId}: Stores work order details, owned by a specific user.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all users is disallowed.
 * - All write operations are validated against the authenticated user's ID (`request.auth.uid`)
 *   to prevent unauthorized data modification.
 * - Data validation is minimal during prototyping, focusing on ownership and relational
 *   integrity rather than comprehensive schema enforcement.
 * - Super admin roles are not implemented; all privileges are owner-based.
 *
 * Denormalization for Authorization:
 * - The 'Master' and 'WorkOrder' entities include an 'ownerId' field.  This denormalization
 *   allows rules to quickly verify ownership without additional database reads.  This avoids
 *   costly `get()` operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile. The `uid` field in the document must match the `userId` in the path.
     * @allow (get, update, delete) Signed-in user can only access their own profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Cannot create a user profile without being signed in.
     * @deny (update, delete) Cannot modify or delete another user's profile.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile, but enforce that the 'uid' field matches the path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;

      allow get: if isOwner(userId);
      allow list: if false;

      // Protect updates and deletes.  The user must be the owner and the document must exist.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master/professional information.
     * @path /masters/{masterId}
     * @allow (create) Signed-in user creates a master profile with their `uid` as the `ownerId`.
     * @allow (get, list) Anyone can read the master profiles.
     * @allow (update, delete) Only the owner can modify or delete their master profile.
     * @deny (create) Cannot create a master profile without being signed in.
     * @deny (update, delete) Cannot modify or delete another user's master profile.
     * @principle Enforces owner-only write access with public read access.
     */
    match /masters/{masterId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(ownerId) {
          return request.auth.uid == ownerId;
        }

        function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
        }

        // Allow anyone to read master profiles.
        allow get, list: if true;

        // Allow a user to create a master profile, enforcing that they are the owner.
        allow create: if isSignedIn() && isOwner(request.resource.data.ownerId) && request.resource.data.ownerId == request.auth.uid;

        // Only the owner can update or delete the master profile.
        allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
        allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order information.
     * @path /work-orders/{workOrderId}
     * @allow (create) Signed-in user creates a work order with their `uid` as the `ownerId`.
     * @allow (get, list) Anyone can read the work orders.
     * @allow (update, delete) Only the owner can modify or delete their work order.
     * @deny (create) Cannot create a work order without being signed in.
     * @deny (update, delete) Cannot modify or delete another user's work order.
     * @principle Enforces owner-only write access with public read access.
     */
    match /work-orders/{workOrderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      // Allow anyone to read work orders.
      allow get, list: if true;

      // Allow a user to create a work order, enforcing that they are the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId) && request.resource.data.ownerId == request.auth.uid;

      // Only the owner can update or delete the work order.
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}