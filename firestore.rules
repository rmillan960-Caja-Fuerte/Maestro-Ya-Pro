rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} collection, allowing only the authenticated user to read and write their own data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete, list) if the authenticated user's UID matches the {userId}.
     * @deny (get, create, update, delete, list) if the authenticated user's UID does not match the {userId}.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures the /clients/{clientId} collection, allowing only the owner to read, create, update, and delete client data.
     * @path /databases/{database}/documents/clients/{clientId}
     * @allow (get, create, update, delete, list) if the authenticated user is the owner of the client document.
     * @deny (get, create, update, delete, list) if the authenticated user is not the owner of the client document.
     * @principle Enforces document ownership for clients.
     */
    match /clients/{clientId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && request.auth.uid != null;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Secures the /masters/{masterId} collection, allowing only the owner to read, create, update, and delete master data.
     * @path /databases/{database}/documents/masters/{masterId}
     * @allow (get, create, update, delete, list) if the authenticated user is the owner of the master document.
     * @deny (get, create, update, delete, list) if the authenticated user is not the owner of the master document.
     * @principle Enforces document ownership for masters.
     */
    match /masters/{masterId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.ownerId);
      allow list: if isSignedIn() && request.auth.uid != null;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Secures the /work-orders/{workOrderId} collection, allowing only the owner to read, create, update, and delete work order data.
     * @path /databases/{database}/documents/work-orders/{workOrderId}
     * @allow (get, create, update, delete, list) if the authenticated user is the creator of the work order document.
     * @deny (get, create, update, delete, list) if the authenticated user is not the creator of the work order document.
     * @principle Enforces document ownership for work orders.
     */
    match /work-orders/{workOrderId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.createdBy);
      allow list: if isSignedIn() && request.auth.uid != null;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy);
    }
  }
}