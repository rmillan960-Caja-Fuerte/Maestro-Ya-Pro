/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It uses a strict user-ownership model for the /users/{userId} collection, granting each user full control over their own document.
 *
 * Data Structure:
 * Data is organized under the /users/{userId} collection, where each document ID corresponds to a user's Firebase Auth UID.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect privacy.
 * - No schema validation is performed to allow for flexible data evolution.
 * - Default security posture is owner-only access unless explicitly made public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants a user full access to their own document in the /users collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete, list) User with UID "testUID" can read, create, update, and delete the document /users/testUID.
     * @deny (get, create, update, delete, list) User with UID "anotherUID" cannot access the document /users/testUID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the given user ID.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the given user ID.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }
  }
}