/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict user-ownership model, where users can only access their own data,
 *  with an exception for public listing of masters.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /masters/{masterId}: Stores professional/master profiles, readable by everyone but writable only by the owner.
 * - /work-orders/{workOrderId}: Stores work order details, accessible only to the owning user.
 *
 * @key_security_decisions
 * - Users cannot list all users. Listing of `/users` is denied.
 * - Masters profiles are readable by everyone.
 * - All write operations are restricted to authenticated users.
 *
 * @denormalization_for_authorization
 * - The `ownerId` field on `masters` and `work-orders` documents is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "uid": "user123", "email": "test@example.com", "firstName": "Test", "lastName": "User", "role": "OPERATOR", "isActive": true, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with UID 'user123' cannot create a profile for another user 'user456'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "uid": "user456", "email": "test@example.com", "firstName": "Test", "lastName": "User", "role": "OPERATOR", "isActive": true, "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete another user's profile 'user456'.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Enforces user-ownership; users can only manage their own profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /databases/{database}/documents/masters/{masterId}
     * @allow (get, list) - Any user can read/list master profiles.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (create) - User with UID 'user123' can create a master profile with ownerId 'user123'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "ownerId": "user123", "country": "EC", "city": "UIO", "firstName": "Test", "lastName": "Master", "email": "master@example.com", "phone": "123-456-7890", "specialties": [], "status": "active" } } }
     * @allow (update, delete) - User with UID 'user123' can update/delete their own master profile (where ownerId is 'user123').
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with UID 'user123' cannot create a master profile for another user 'user456'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "ownerId": "user456", "country": "EC", "city": "UIO", "firstName": "Test", "lastName": "Master", "email": "master@example.com", "phone": "123-456-7890", "specialties": [], "status": "active" } } }
     * @deny (update, delete) - User with UID 'user123' cannot update/delete another user's master profile (where ownerId is 'user456').
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Allows public read access to master profiles but enforces owner-only write access.
     */
    match /masters/{masterId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to work order documents.
     * @path /databases/{database}/documents/work-orders/{workOrderId}
     * @allow (create) - User with UID 'user123' can create a work order with ownerId 'user123'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "ownerId": "user123", "country": "EC", "orderNumber": "WO-123", "clientId": "client456", "status": "pending", "title": "Fix plumbing", "total": 100, "createdAt": "2024-01-05T00:00:00Z" } } }
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, and delete their own work orders (where ownerId is 'user123').
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with UID 'user123' cannot create a work order for another user 'user456'.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "ownerId": "user456", "country": "EC", "orderNumber": "WO-123", "clientId": "client456", "status": "pending", "title": "Fix plumbing", "total": 100, "createdAt": "2024-01-05T00:00:00Z" } } }
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, list, update, or delete another user's work orders (where ownerId is 'user456').
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Enforces user-ownership; users can only manage their own work orders.
     */
    match /work-orders/{workOrderId} {
      allow get, list: if isOwner(resource.data.ownerId);
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to client documents.
     * @path /databases/{database}/documents/clients
     * @allow (list) - Denies listing of clients collection.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (get, create, update, delete) - No one has access to these documents.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Disables client listing as not permitted by the app requirements.
     */
    match /clients/{clientId} {
      allow get, create, update, delete: if false;
      allow list: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}