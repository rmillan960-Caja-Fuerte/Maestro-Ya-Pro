/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for all data, with the modification that a super admin can bypass ownership checks.
 *   Each document is owned by a specific user, identified by their UID.
 *   Only the owner or a super admin can create, read, update, or delete their own documents.
 * @data_structure
 *   - /users/{userId}: Stores user profile information. `userId` MUST match the authenticated user's UID.
 *   - /clients/{clientId}: Stores client information. Each client document has an `ownerId` field that MUST match the authenticated user's UID.
 *   - /masters/{masterId}: Stores master/professional information. Each master document has an `ownerId` field that MUST match the authenticated user's UID.
 *   - /work-orders/{workOrderId}: Stores work order details. Each work order document has an `ownerId` field that MUST match the authenticated user's UID.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - All write operations are restricted to the document owner or a super admin.
 *   - The 'role' and 'permissions' fields in the UserProfile are not directly used in these rules, but could be incorporated for more complex authorization logic in the future.
 *   - Data validation is minimal in this prototyping phase, focusing only on authorization-critical fields.
 * @denormalization_for_authorization The `ownerId` field is used throughout the data model to simplify authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user with UID 'user123' can create a profile document at /users/user123.
     * @allow (get, list) Signed-in user with UID 'user123' can read their profile document at /users/user123.
     * @allow (update, delete) Signed-in user with UID 'user123' can update/delete their profile document at /users/user123.
     * @deny (create) Signed-in user with UID 'user123' cannot create a profile document at /users/anotherUser.
     * @deny (get, list, update, delete) Signed-in user with UID 'user123' cannot read/write another user's profile document at /users/anotherUser.
     * @principle Enforces user-ownership: Only the user can manage their own profile.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow list: if false;
      allow create: if isSignedIn() && (isOwner(userId) || isSuperAdmin()) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && (isExistingOwner(userId) || isSuperAdmin()) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isSuperAdmin());
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (create) Signed-in user with UID 'user123' can create a client document at /clients/client456 with ownerId: 'user123'.
     * @allow (get, list) Signed-in user with UID 'user123' can read the client document at /clients/client456 if ownerId: 'user123'.
     * @allow (update, delete) Signed-in user with UID 'user123' can update/delete the client document at /clients/client456 if ownerId: 'user123'.
     * @deny (create) Signed-in user with UID 'user123' cannot create a client document at /clients/client456 with ownerId: 'anotherUser'.
     * @deny (get, list, update, delete) Signed-in user with UID 'user123' cannot read/write a client document at /clients/client456 if ownerId: 'anotherUser'.
     * @principle Enforces document ownership: Only the owner can manage their clients.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && (isOwner(resource.data.ownerId) || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner(request.auth.uid) || isSuperAdmin());
      allow create: if isSignedIn() && (isOwner(request.resource.data.ownerId) || isSuperAdmin());
      allow update: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
    }

    /**
     * @description Controls access to master/professional documents.
     * @path /masters/{masterId}
     * @allow (create) Signed-in user with UID 'user123' can create a master document at /masters/master789 with ownerId: 'user123'.
     * @allow (get, list) Signed-in user with UID 'user123' can read the master document at /masters/master789 if ownerId: 'user123'.
     * @allow (update, delete) Signed-in user with UID 'user123' can update/delete the master document at /masters/master789 if ownerId: 'user123'.
     * @deny (create) Signed-in user with UID 'user123' cannot create a master document at /masters/master789 with ownerId: 'anotherUser'.
     * @deny (get, list, update, delete) Signed-in user with UID 'user123' cannot read/write a master document at /masters/master789 if ownerId: 'anotherUser'.
     * @principle Enforces document ownership: Only the owner can manage their masters.
     */
    match /masters/{masterId} {
      allow get: if isSignedIn() && (isOwner(resource.data.ownerId) || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner(request.auth.uid) || isSuperAdmin());
      allow create: if isSignedIn() && (isOwner(request.resource.data.ownerId) || isSuperAdmin());
      allow update: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
    }

    /**
     * @description Controls access to work order documents.
     * @path /work-orders/{workOrderId}
     * @allow (create) Signed-in user with UID 'user123' can create a work order document at /work-orders/workOrder101 with ownerId: 'user123'.
     * @allow (get, list) Signed-in user with UID 'user123' can read the work order document at /work-orders/workOrder101 if ownerId: 'user123'.
     * @allow (update, delete) Signed-in user with UID 'user123' can update/delete the work order document at /work-orders/workOrder101 if ownerId: 'user123'.
     * @deny (create) Signed-in user with UID 'user123' cannot create a work order document at /work-orders/workOrder101 with ownerId: 'anotherUser'.
     * @deny (get, list, update, delete) Signed-in user with UID 'user123' cannot read/write a work order document at /work-orders/workOrder101 if ownerId: 'anotherUser'.
     * @principle Enforces document ownership: Only the owner can manage their work orders.
     */
    match /work-orders/{workOrderId} {
      allow get: if isSignedIn() && (isOwner(resource.data.ownerId) || isSuperAdmin());
      allow list: if isSignedIn() && (isOwner(request.auth.uid) || isSuperAdmin());
      allow create: if isSignedIn() && (isOwner(request.resource.data.ownerId) || isSuperAdmin());
      allow update: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.ownerId) || isSuperAdmin());
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

    function isSuperAdmin() {
        return request.auth.token.role == 'super_admin';
    }
}