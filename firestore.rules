/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and
 * document ownership while keeping data structure validation flexible.  It
 * enforces that users can only access their own data unless otherwise specified.
 * This allows for rapid data model iteration without being blocked by rules.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information, accessible only to the user.
 * - `/clients/{clientId}`: Client data, owned by a specific user (ownerId).
 * - `/masters/{masterId}`: Master/professional data, owned by a specific user (ownerId).
 * - `/work-orders/{workOrderId}`: Work order data, owned by a specific user (ownerId).
 *
 * Key Security Decisions:
 * - Users are not allowed to list all user profiles (denied at the /users level).
 * - Ownership is enforced via the `ownerId` field on `clients`, `masters`, and `work-orders`.
 *
 * Denormalization for Authorization:
 * The `clients`, `masters`, and `work-orders` documents include an `ownerId` field,
 * which is used to efficiently determine ownership without needing additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read, update, or delete their profile.
     * @deny (list) Prevents listing all user profiles.
     * @deny (create, update, delete) Other users cannot create, update, or delete profiles.
     * @principle Enforces document ownership for all operations on the /users collection.
     */
    match /users/{userId} {
      // Verified user can create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      // Only the owner can read their profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Only the owner can list their own profile.
      allow list: if false;
      // Only the owner can update their profile.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      // Only the owner can delete their profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to client data.
     * @path /clients/{clientId}
     * @allow (create) Owner can create client data with matching ownerId.
     * @allow (get, list, update, delete) Owner can read, list, update, or delete their client data.
     * @deny (create, update, delete) Non-owners cannot create, update, or delete client data.
     * @principle Enforces document ownership for writes; allows owner-only reads and lists.
     */
    match /clients/{clientId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow get, list: if isSignedIn() && isOwner(resource.data.ownerId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages access to master/professional data.
     * @path /masters/{masterId}
     * @allow (create) Owner can create master data with matching ownerId.
     * @allow (get, list, update, delete) Owner can read, list, update, or delete their master data.
     * @deny (create, update, delete) Non-owners cannot create, update, or delete master data.
     * @principle Enforces document ownership for writes; allows owner-only reads and lists.
     */
    match /masters/{masterId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow get, list: if isSignedIn() && isOwner(resource.data.ownerId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages access to work order data.
     * @path /work-orders/{workOrderId}
     * @allow (create) Owner can create work order data with matching ownerId.
     * @allow (get, list, update, delete) Owner can read, list, update, or delete their work order data.
     * @deny (create, update, delete) Non-owners cannot create, update, or delete work order data.
     * @principle Enforces document ownership for writes; allows owner-only reads and lists.
     */
    match /work-orders/{workOrderId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow get, list: if isSignedIn() && isOwner(resource.data.ownerId);
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}