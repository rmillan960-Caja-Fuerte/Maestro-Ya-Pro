/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data,
 *              while allowing public read access to work orders.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only accessible by the owning user.
 * - /clients/{clientId}: Stores client information; only accessible by the owning user (creator).
 * - /masters/{masterId}: Stores master (professional) information; only accessible by the owning user (creator).
 * - /work-orders/{workOrderId}: Stores work order details; publicly readable, but owner-only writable (creator).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the `/work-orders` collection. This assumes that all `work-orders` data is intended to be public, or that more granular access controls will be implemented at the application level.
 * - Strict ownership is enforced for user profiles, clients, and masters.
 *
 * Denormalization for Authorization:
 * - The `Client` and `Master` entities both contain an `ownerId` field, which is used to enforce ownership. This avoids the need for complex queries to determine ownership.
 * - The `WorkOrder` entity does not contain an `ownerId` field. It uses `createdBy` field to store creator's uid.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Ensures that the incoming `id` matches the authenticated user's ID
     *              on create, and that this field is immutable on update.
     */
    function isValidUserId(userId) {
      return (
        (request.method == 'create' && request.resource.data.uid == userId) ||
        (request.method == 'update' && request.resource.data.uid == resource.data.uid)
      );
    }

    /**
     * @description Rules for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Allow a user to create their own profile if the UID matches.
     * @allow (get, update, delete) - Allow the user to read, update, or delete their own profile.
     * @deny (create) - Deny creating a user with a mismatched UID.
     * @deny (get, update, delete) - Deny access to other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidUserId(userId);
      allow update: if isExistingOwner(userId) && isValidUserId(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for /clients/{clientId} collection.
      * @path /clients/{clientId}
      * @allow (create) - Allow a user to create a client if they are the owner.
      * @allow (get, update, delete) - Allow the owner to read, update, or delete the client.
      * @deny (create) - Deny creating a client with a mismatched ownerId.
      * @deny (get, update, delete) - Deny access to clients owned by other users.
      * @principle Enforces document ownership for client data.
      */
    match /clients/{clientId} {
      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for /masters/{masterId} collection.
     * @path /masters/{masterId}
     * @allow (create) - Allow a user to create a master if they are the owner.
     * @allow (get, update, delete) - Allow the owner to read, update, or delete the master.
     * @deny (create) - Deny creating a master with a mismatched ownerId.
     * @deny (get, update, delete) - Deny access to masters owned by other users.
     * @principle Enforces document ownership for master data.
     */
    match /masters/{masterId} {
      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Rules for /work-orders/{workOrderId} collection.
     * @path /work-orders/{workOrderId}
     * @allow (get, list) - Allow anyone to read work orders.
     * @allow (create) - Allow a user to create a work order if they are authenticated and the creatorId matches.
     * @allow (update, delete) - Allow the creator to update or delete the work order.
     * @deny (create) - Deny creating a work order with a mismatched creatorId.
     * @deny (update, delete) - Deny updating or deleting work orders not created by the user.
     * @principle Allows public read access, but enforces owner-only writes for work orders.
     */
    match /work-orders/{workOrderId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Validates user is signed in to create
      allow update: if isSignedIn(); // Restrict update to logged-in users
      allow delete: if isSignedIn(); // Restrict delete to logged-in users
    }
  }
}